# Findk2
# ------
#
# Finds the k2 library
#
# This will define the following variables:
#
#   K2_FOUND        -- True if the system has the k2 library
#   K2_INCLUDE_DIRS -- The include directories for k2
#   K2_LIBRARIES    -- Libraries to link against
#   K2_CXX_FLAGS -- Additional (required) compiler flags
#   K2_CUDA_FLAGS -- CUDA flags used to build k2
#   K2_WITH_CUDA -- true if k2 was compiled with CUDA; false if k2 was compiled
#                   with CPU.
#   K2_CUDA_VERSION -- If set, it is the CUDA version that was used to compile k2
#   K2_TORCH_VERSION_MAJOR  -- The major version of PyTorch used to compile k2
#   K2_TORCH_VERSION_MINOR  -- The minor version of PyTorch used to compile k2
#   K2_VERSION -- The version of k2
#   K2_GIT_SHA1 -- git commit ID of this version
#   K2_GIT_DATE -- commit date of this version
#
# and the following imported targets:
#
#   k2_torch_api

# This file is modified from pytorch/cmake/TorchConfig.cmake.in

set(K2_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
set(K2_CUDA_FLAGS "@CMAKE_CUDA_FLAGS@")
set(K2_WITH_CUDA @K2_WITH_CUDA@)
set(K2_CUDA_VERSION @CUDA_VERSION@)
set(K2_TORCH_VERSION_MAJOR @K2_TORCH_VERSION_MAJOR@)
set(K2_TORCH_VERSION_MINOR @K2_TORCH_VERSION_MINOR@)
set(K2_VERSION @K2_VERSION@)
set(K2_GIT_SHA1 @K2_GIT_SHA1@)
set(K2_GIT_DATE @K2_GIT_DATE@)

if(DEFINED ENV{K2_INSTALL_PREFIX})
  set(K2_INSTALL_PREFIX $ENV{K2_INSTALL_PREFIX})
else()
  # Assume we are in <install-prefix>/share/cmake/k2/k2Config.cmake
  get_filename_component(CMAKE_CURRENT_LIST_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
  get_filename_component(K2_INSTALL_PREFIX "${CMAKE_CURRENT_LIST_DIR}/../../../" ABSOLUTE)
endif()

set(K2_INCLUDE_DIRS ${K2_INSTALL_PREFIX}/include)
set(K2_LIBRARIES k2_torch_api k2_log k2context k2fsa)

list(APPEND K2_LIBRARIES "-L${K2_INSTALL_PREFIX}/lib")

find_library(K2_LIBRARY k2_torch_api PATHS "${K2_INSTALL_PREFIX}/lib")
add_library(k2_torch_api SHARED IMPORTED)

set_target_properties(k2_torch_api PROPERTIES
    INTERFACE_INCLUDE_DIRECTORIES "${K2_INCLUDE_DIRS}"
    IMPORTED_LOCATION "${K2_LIBRARY}"
    INTERFACE_COMPILE_OPTIONS @CMAKE_CXX_FLAGS@
    CXX_STANDARD 14
)
target_compile_definitions(k2_torch_api INTERFACE -DHAVE_K2_TORCH_API_H=1)

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(k2 DEFAULT_MSG K2_LIBRARY)
