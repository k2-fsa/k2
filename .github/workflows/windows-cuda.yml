# Copyright      2021  Fangjun Kuang (csukuangfj@gmail.com)

# See ../../LICENSE for clarification regarding multiple authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


name: build-windows-cuda

on:
  push:
    branches:
      - fix-build-on-windows
      - master
  pull_request:
    types: [labeled]

env:
  BUILD_TYPE: Release

jobs:
  build-windows:
    # see https://github.com/actions/virtual-environments/blob/win19/20210525.0/images/win/Windows2019-Readme.md
    # if: github.event.label.name == 'ready' || github.event_name == 'push'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2019]
        python-version: ["3.8"]
        torch: ["1.10.0"]
        # torch: ["1.4.0", "1.5.0", "1.5.1", "1.6.0", "1.7.0", "1.7.1", "1.8.0", "1.8.1", "1.9.0", "1.9.1", "1.10.0", "1.10.1", "1.10.2", "1.11.0"]
        # exclude:
        #   - python-version: 3.9 # exclude Python 3.9 for [1.5.0, 1.5.1, 1.6.0, 1.7.0]
        #     torch: "1.5.0"
        #   - python-version: 3.9
        #     torch: "1.5.1"
        #   - python-version: 3.9
        #     torch: "1.6.0"
        #   - python-version: 3.9
        #     torch: "1.7.0"
        #   - python-version: "3.10" # exclude Python 3.10 for [1.4.0, 1.5.0, 1.5.1, 1.6.0, 1.7.0, 1.7.1, 1.8.0, 1.8.1, 1.9.0, 1.9.1, 1.10.0, 1.10.1, 1.10.2]
        #     torch: "1.4.0"
        #   - python-version: "3.10"
        #     torch: "1.5.0"
        #   - python-version: "3.10"
        #     torch: "1.5.1"
        #   - python-version: "3.10"
        #     torch: "1.6.0"
        #   - python-version: "3.10"
        #     torch: "1.7.0"
        #   - python-version: "3.10"
        #     torch: "1.7.1"
        #   - python-version: "3.10"
        #     torch: "1.8.0"
        #   - python-version: "3.10"
        #     torch: "1.8.1"
        #   - python-version: "3.10"
        #     torch: "1.9.0"
        #   - python-version: "3.10"
        #     torch: "1.9.1"
        #   - python-version: "3.10"
        #     torch: "1.10.0"
        #   - python-version: "3.10"
        #     torch: "1.10.1"
        #   - python-version: "3.10"
        #     torch: "1.10.2"
        #   - python-version: "3.6" # exclude Python 3.6 for [1.11.0]
        #     torch: "1.11.0"

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # see https://github.com/microsoft/setup-msbuild
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Cache multiple paths
        uses: actions/cache@v3
        id: cache-cuda
        with:
          path: |
            !~/cache/exclude
            "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/lib/"
          key: ${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.torch }}-cuda-11.1.1

      - name: Download CUDNN for CUDA 11.1
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          git clone https://huggingface.co/csukuangfj/cudnn-for-windows
          cd cudnn-for-windows
          git lfs pull --include="cudnn-windows-x86_64-8.3.3.40_cuda10.2-archive.zip"
          ls

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          cache: 'pip'
          python-version: ${{ matrix.python-version }}
          cache-dependency-path: '**/requirements.txt'

      # See https://github.com/Jimver/cuda-toolkit/blob/master/src/links/windows-links.ts
      # for available CUDA versions
      - uses: Jimver/cuda-toolkit@v0.2.5
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        id: cuda-toolkit
        with:
          cuda: '11.1.1'

      - name: Set environment variables
        shell: bash
        run: |
          # echo "Installed cuda version is: ${{ steps.cuda-toolkit.outputs.cuda }}"
          # echo "Cuda install location: ${{ steps.cuda-toolkit.outputs.CUDA_PATH }}"
          CUDA_HOME="C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/"
          echo "CUDA_HOME=${CUDA_HOME}" >> $GITHUB_ENV
          echo "${CUDA_HOME}/bin" >> $GITHUB_PATH

          ls -lh $GITHUB_ENV
          ls -lh $GITHUB_PATH
          cat $GITHUB_ENV
          cat $GITHUB_PATH

      - name: Display NVCC version
        shell: bash
        run: |
          "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/bin/nvcc" --version

      - name: Unzip cuDNN
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          cd cudnn-for-windows
          mkdir t
          Expand-Archive -LiteralPath .\cudnn-windows-x86_64-8.3.3.40_cuda10.2-archive.zip -DestinationPath .\t

      - name: Move cuDNN
        if: steps.cache-cuda.outputs.cache-hit != 'true'
        shell: bash
        run: |
          cd cudnn-for-windows/t/cudnn-windows-x86_64-8.3.3.40_cuda10.2-archive
          ls -lh include/
          ls -lh bin/
          ls -lh lib/

          mv ./bin/* "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/bin/"
          mv ./lib/* "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/lib/"
          mv ./include/* "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include/"
          ls -lh "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.1/include/"

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install PyTorch ${{ matrix.torch }}
        run: |
          pip3 install -qq torch==${{ matrix.torch }}+cu111 -f https://download.pytorch.org/whl/torch_stable.html numpy
          pip3 install -qq wheel twine dataclasses typing_extensions

          python3 -m torch.utils.collect_env

      - name: Display CMake version
        run: |
          cmake --version
          cmake --help

      - name: Configure CMake
        shell: bash
        run: |
          mkdir build_release
          cd build_release
          cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DK2_WITH_CUDA=ON ..
          ls -lh

      - name: Build k2
        shell: bash
        run: |
          cd build_release
          cmake --build . --target _k2 --config Release

      - name: Display generated files
        shell: bash
        run: |
          cd build_release
          ls -lh lib/*/*

      - name: Build wheel
        shell: bash
        run: |
          export K2_CMAKE_ARGS="-DK2_WITH_CUDA=ON -DCMAKE_BUILD_TYPE=Release"
          python3 setup.py bdist_wheel
          ls -lh dist/
          pip install ./dist/*.whl

      - name: Upload Wheel
        uses: actions/upload-artifact@v2
        with:
          name: torch-${{ matrix.torch }}-python-${{ matrix.python-version }}-${{ matrix.os }}-cuda-11.1
          path: dist/*.whl

      - name: Build C++ tests
        shell: bash
        run: |
          cd build_release
          cmake --build . --target ALL_BUILD --config Release
          ls -lh bin/*/*
          # disable python tests for k2host
          # ctest -C Release --output-on-failure -E host
