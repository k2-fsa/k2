/**
 * @brief
 * This file contains information for building k2, which is helpful
 * for describing the environment in which k2 is used when creating
 * a issue on GitHub.
 *
 * @copyright
 * Copyright (c)  2020  Mobvoi Inc.        (authors: Fangjun Kuang)
 *
 * @copyright
 * See LICENSE for clarification regarding multiple authors
 *
 * @caution
 * This file is auto-generated by CMake. Do NOT edit!
 * You can find it at build_dir/k2/csrc/version.h
 */

#ifndef K2_CSRC_VERSION_H_
#define K2_CSRC_VERSION_H_

namespace k2 {

// Version of k2 in "major.minor.patch" format
static constexpr const char *kVersion = "@K2_VERSION@";

// The commit used to build k2
static constexpr const char *kGitSha1 = "@K2_GIT_SHA1@";

// Date of the commit used to build k2
static constexpr const char *kGitDate = "@K2_GIT_DATE@";

// Version of CUDA used to build k2.
// Its format is "major.minor", e.g., 10.1
static constexpr const char *kCudaVersion = "@CUDA_VERSION@";

// cuDNN version, e.g., 8.0.2
static constexpr const char *kCudnnVersion = "@CUDNN_VERSION@";

// clang-format off
// Version of Python used to build k2 Python bindings.
static constexpr const char *kPythonVersion = "@PYTHON_VERSION_MAJOR@.@PYTHON_VERSION_MINOR@";

static constexpr const char *kPybindVersion ="@PYBIND11_VERSION_MAJOR@.@PYBIND11_VERSION_MINOR@.@PYBIND11_VERSION_PATCH@";
// clang-format on

// CMake build type, e.g., Release or Debug.
static constexpr const char *kBuildType = "@CMAKE_BUILD_TYPE@";

// The operating system that is used to build k2, e.g., Ubuntu 16.04 LTS
static constexpr const char *kOS = "@K2_OS@";

// e.g., 3.18.0
static constexpr const char *kCMakeVersion = "@CMAKE_VERSION@";

// Version of the compiler, e.g., 5.4.0
static constexpr const char *kGCCVersion = "@CMAKE_CXX_COMPILER_VERSION@";

// CUDA flags used to compile k2
static constexpr const char *kCMakeCudaFlags = "@CMAKE_CUDA_FLAGS@";

// CXX flags used to compile k2
static constexpr const char *kCMakeCxxFlags = "@CMAKE_CXX_FLAGS@";

// Which PyTorch version k2 is using, e.g., 1.6.0+cu101
static constexpr const char *kTorchVersion = "@TORCH_VERSION@";

// Which CUDA version PyTorch is using, e.g., 10.1
static constexpr const char *kTorchCudaVersion = "@TORCH_CUDA_VERSION@";

// Indicate whether NVTX is enabled or not
#ifndef K2_ENABLE_NVTX
#cmakedefine K2_ENABLE_NVTX
#endif

#ifdef K2_ENABLE_NVTX
static constexpr bool kEnableNvtx = true;
#else
static constexpr bool kEnableNvtx = false;
#endif

}  // namespace k2

#endif  //  K2_CSRC_VERSION_H_
